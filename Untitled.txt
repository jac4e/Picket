
''' <summary>
''' Runs a process.
''' </summary>
''' <param name="fileName">Name of the file.</param>
''' <param name="arguments">The arguments.</param>
Public Sub StartProcess(fileName As String, arguments As String)
	'  Create the process start info.
	Dim processStartInfo = New ProcessStartInfo(fileName, arguments)

	'  Set the options.
	processStartInfo.UseShellExecute = False
	processStartInfo.ErrorDialog = False
	processStartInfo.CreateNoWindow = True

	'  Specify redirection.
	processStartInfo.RedirectStandardError = True
	processStartInfo.RedirectStandardInput = True
	processStartInfo.RedirectStandardOutput = True
	'  Create the process.
	currentProcess = New Process()
	currentProcess.EnableRaisingEvents = True
	currentProcess.StartInfo = processStartInfo
	currentProcess.Exited += New EventHandler(currentProcess_Exited)

	'  Try to start the process.
	Try
		Dim processStarted As Boolean = currentProcess.Start()
	Catch e As Exception
		'  We failed to start the process. Write the output (if we have diagnostics on).
		If ShowDiagnostics Then
			WriteOutput("Failed: " + e.ToString() + Environment.NewLine, Color.Red)
		End If
		Return
	End Try

	'  Store name and arguments.
	currentProcessFileName = fileName
	currentProcessArguments = arguments
	'  Create the readers and writers.
	inputWriter = currentProcess.StandardInput
	outputReader = TextReader.Synchronized(currentProcess.StandardOutput)
	errorReader = TextReader.Synchronized(currentProcess.StandardError)

	'  Run the output and error workers.
	outputWorker.RunWorkerAsync()
	errorWorker.RunWorkerAsync()

	'  If we enable input, make the control not read only.
	If IsInputEnabled Then
		richTextBoxConsole.[ReadOnly] = False
	End If
End Sub
''' <summary>
''' Handles the DoWork event of the outputWorker control.
''' </summary>
''' <param name="sender">The source of the event.</param>
''' <param name="e">The <see cref="System.ComponentModel.DoWorkEventArgs"/>
'''    instance containing the event data.</param>
Private Sub outputWorker_DoWork(sender As Object, e As DoWorkEventArgs)
	'  Keep working until we're told to cancel.
	While outputWorker.CancellationPending = False
		'  Just keep on reading the buffer.
		Dim count As Integer = 0
		Dim buffer As Char() = New Char(1023) {}
		Do
			'  Create a builder.
			Dim builder As New StringBuilder()

			'  Read and append data.
			count = outputReader.Read(buffer, 0, 1024)
			builder.Append(buffer, 0, count)

			'  Report the progress.
			outputWorker.ReportProgress(0, New OutputEvent() With { _
				Key .Output = builder.ToString() _
			})
		Loop While count > 0
	End While
End Sub
''' <summary>
''' Handles the ProgressChanged event of the outputWorker control.
''' </summary>
''' <param name="sender">The source of the event.</param>
''' <param name="e">The <see cref="System.ComponentModel.ProgressChangedEventArgs"/>
'''    instance containing the event data.</param>
Private Sub outputWorker_ProgressChanged(sender As Object, e As ProgressChangedEventArgs)
	If TypeOf e.UserState Is OutputEvent Then
		'  Get the event data.
		Dim outputEvent = TryCast(e.UserState, OutputEvent)

		'  Write the output.
		WriteOutput(outputEvent.Output, Color.White)
	End If
End Sub

''' <summary>
''' Writes the output to the console control.
''' </summary>
''' <param name="output">The output.</param>
''' <param name="color">The color.</param>
Public Sub WriteOutput(output As String, color As Color)
	If String.IsNullOrEmpty(lastInput) = False AndAlso output.Contains(lastInput) Then
		Return
	End If

	'  Invoke on the UI thread...
	Invoke(DirectCast(Function() 
	'  Write the output.
	richTextBoxConsole.SelectionColor = color
	richTextBoxConsole.SelectedText += output
	inputStart = richTextBoxConsole.SelectionStart

End Function, Action))
End Sub
''' <summary>
''' Handles the KeyDown event of the richTextBoxConsole control.
''' </summary>
''' <param name="sender">The source of the event.</param>
''' <param name="e">The <see
'''    cref="System.Windows.Forms.KeyEventArgs"/>
'''    instance containing the event data.</param>
Private Sub richTextBoxConsole_KeyDown(sender As Object, e As KeyEventArgs)
	'  If we're at the input point and it's backspace, bail.
	If (richTextBoxConsole.SelectionStart <= inputStart) AndAlso e.KeyCode = Keys.Back Then
		e.SuppressKeyPress = True
	End If

	'  If we're before the input point and it's anything but arrows, bail.
	If (richTextBoxConsole.SelectionStart < inputStart) AndAlso Not (e.KeyCode = Keys.Left OrElse e.KeyCode = Keys.Right OrElse e.KeyCode = Keys.Up OrElse e.KeyCode = Keys.Down) Then
		e.SuppressKeyPress = True
	End If

	If e.KeyCode = Keys.[Return] Then
		'  Get the input.
		Dim input As String = richTextBoxConsole.Text.Substring(inputStart, (richTextBoxConsole.SelectionStart) - inputStart)

		'  Write the input (without echoing).
		WriteInput(input, Color.White, False)

		'    We're done.
		e.SuppressKeyPress = True
	End If
End Sub